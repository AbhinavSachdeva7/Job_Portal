// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

// ===================================================
// ENUMS - These map directly to your SQL ENUM types
// ===================================================
enum UserStatus {
  active
  inactive
  pending_profile
  suspended
  deleted

  @@map("user_status")
}

enum UserRole {
  candidate
  recruiter
  admin

  @@map("user_role")
}

// ===================================================
// MODELS - These map to your SQL tables
// ===================================================

model User {
  id              Int      @id @default(autoincrement()) @map("user_id")
  name            String?
  email           String   @unique
  hashedPassword  String   @map("hashed_password")
  role            UserRole @default(candidate)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  status          UserStatus?
  companyId       Int?      // The foreign key. It's optional '?' because a 'candidate' won't have a company.    

  // --- Relations ---
  jobs            Job[]
  profile         UserProfile?
  applications    JobApplication[]
  company         Company? @relation(fields: [companyId], references: [id]) 

  @@map("users")
}

model Company {
  id          Int      @id @default(autoincrement()) @map("company_id")
  name        String
  description String?
  website     String?
  location    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // --- Relations ---
  
  jobs        Job[]
  employees   User[]
  @@map("companies")
}

model Job {
  id          Int      @id @default(autoincrement()) @map("job_id")
  userId      Int      @map("user_id") // The recruiter who posted it
  companyId   Int      @map("company_id")
  title       String?
  description String
  location    String?
  pay         String?

  // --- Relations ---
  poster       User           @relation(fields: [userId], references: [id])
  company      Company        @relation(fields: [companyId], references: [id])
  applications JobApplication[]

  @@map("jobs")
}

model UserProfile {
  id           Int      @id @default(autoincrement()) @map("profile_id")
  userId       Int      @unique @map("user_id")
  phoneNumber  String?  @map("phone_number")
  address      String?
  education    String?
  experience   String?
  skills       String[]
  resumeUrl    String?  @map("resume_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // --- Relations ---
  user User @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model JobApplication {
  id        Int      @id @default(autoincrement()) @map("application_id")
  jobId     Int      @map("job_id")
  userId    Int      @map("user_id") // The candidate who applied 
  appliedAt DateTime @default(now()) @map("applied_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  coverLetter String?

  // --- Relations ---
  job    Job  @relation(fields: [jobId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([jobId, userId])
  @@map("job_applications")
} 